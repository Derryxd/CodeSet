目录
1 context manager介绍
2 Python字符串格式化--format()方法
3 字符串前面添加u,r,b的含义
4 深拷贝
5 list和tuple的一些点

一、context manager介绍：
1、繁琐的写法：try-finally的语法结构
'''
try:						
    f = open('xxx')						
except:						
    print 'fail to open'						
    exit(-1)						
try:						
    do something						
except:						
    do something						
finally:						
    f.close()
'''
（1）标准格式：
#	set	things up
#	try:
#	    do something
#	finally:
#	    tear things down
	这东西是个常见结构，比如文件打开，set things up就表示f=open('xxx')，tear things down就表示f.close()。
	在比如像多线程锁，资源请求，最终都有一个释放的需求。Try…finally结构保证了tear things down这一段永远都会执行，即使上面do something得工作没有完全执行。
（2）封装：
#	def	controlled_execution(callback):
#	    set	things up
#	    try:
#	        callback(thing)
#	    finally:
#	        tear things down
#	def
#	my_function(thing):
#	    do something
	封装是一个支持代码重用的好办法，但是这个办法很dirty，特别是当do something中有修改一些local variables的时候（变成函数调用，少不了带来变量作用域上的麻烦）。
（3）使用生成器：for-in结构
#	def controlled_execution():
#	    set things up
#	    try:
#	        yield thing
#	    finally:
#	        tear things down
#	for thing in controlled_execution():
#	    do something with thing
	因为thing只有一个，所以yield语句只需要执行一次。当然，从代码可读性也就是优雅的角度来说这简直是糟糕透了。
	我们在确定for循环只执行一次的情况下依然使用了for循环，这代码给不知道的人看一定很难理解这里的循环是什么个道理。

2、优雅的写法：with-as的语法结构
'''
try:
    with open( "a.txt") as f :
        do something
except xxxError:
    do something about exception
'''
（1）with表达式的语法：
#	class controlled_execution:
#	    def __enter__(self):
#	        set	things up
#	        return thing
#	    def __exit__(self, type, value, traceback):
#	        tear things down
#	with controlled_execution() as thing:
#	        do something
	在这里，python使用了with-as的语法。当python执行这一句时，会调用__enter__函数，然后把该函数return的值传给as后指定的变量。
	之后，python会执行下面do something的语句块。最后不论在该语句块出现了什么异常，都会在离开时执行__exit__。
	另外，__exit__除了用于tear things down，还可以进行异常的监控和处理，注意后几个参数。要跳过一个异常，只需要返回该函数True即可。
（2）细节介绍：
	下面的样例代码跳过了所有的TypeError，而让其他异常正常抛出：
#	def __exit__(self, type, value, traceback):
#	    return isinstance(value, TypeError)
	在python2.5及以后，file对象已经写好了__enter__和__exit__函数，我们可以这样测试：
#	f = open("x.txt")
#	f.__enter__()
#	f.__exit__(None, None, None)
#	f.read(1)
	之后，我们如果要打开文件并保证最后关闭他，只需要这么做：
#	with open("x.txt") as f:
#	    data = f.read()
#	    do something with data
	如果有多个项，我们可以这么写：
#	with open("x.txt") as f1, open('xxx.txt') as f2:
#	    do something with f1,f2


二、Python字符串格式化--format()方法
1.简单运用
格式：<模板字符串>.format(<逗号分隔的参数>)
例子：
	"{}{}{}".format("圆周率是",3.1415926,"...")
		Out[11]: '圆周率是3.1415926...'
	"圆周率{{{1}{2}}}是{0}".format("无理数",3.1415926,"...")
		Out[12]: '圆周率{3.1415926...}是无理数'
	s="圆周率{{{1}{2}}}是{0}" #大括号本身是字符串的一部分
		Out[14]: '圆周率{{{1}{2}}}是{0}'
	s.format("无理数",3.1415926,"...") #当调用format()时解析大括号
		Out[15]: '圆周率{3.1415926...}是无理数'
	a = '{:08}'.format(11)
		Out[27]: '00000011'
	a = '{0:8}'.format(11)
		Out[29]: '      11'
2. 格式控制信息
   format()方法中<模板字符串>的槽除了包括参数序号，还可以包括格式控制信息。
   此时，槽的内部样式如下：{<参数序号>:<格式控制标记>}
   其中，<格式控制标记>用来控制参数显示时的格式，包括：<填充><对齐><宽度>,<.精度><类型>6 个字段，这些字段都是可选的，可以组合使用，逐一介绍如下。
<宽度>
	指当前槽的设定输出字符宽度，如果该槽对应的format()参数长度比<宽度>设定值大，则使用参数实际长度。如果该值的实际位数小于指定宽度，则位数将被默认以空格字符补充。
<对齐>
	指参数在<宽度>内输出时的对齐方式，分别使用 < 和 > 以及 ^ 这个三个符号表示左对齐、右对齐和居中对齐。
<填充> 
	指<宽度>内除了参数外的字符采用什么方式表示，默认采用空格，可以通过<填充>更换。
	s = "PYTHON"
	"{0:30}".format(s)
		Out[17]: 'PYTHON                        '
	"{0:>30}".format(s)
		Out[18]: '                        PYTHON'
	"{0:*^30}".format(s)
		out[19]: '************PYTHON************'
	"{0:-^30}".format(s)
		Out[20]: '------------PYTHON------------'
	"{0:3}".format(s)
		Out[21]: 'PYTHON'
逗号（，）
	<格式控制标记>中逗号（，）用于显示数字的千位分隔符，例如：
	"{0:-^20,}".format(1234567890)
	Out[24]: '---1,234,567,890----'
	"{0:-^20}".format(1234567890) #对比输出
	Out[25]: '-----1234567890-----'
	"{0:-^20,}".format(12345.67890)
	Out[26]: '----12,345.6789-----'
 <.精度>
	表示两个含义，由小数点（.）开头。对于浮点数，精度表示小数部分输出的有效位数。对于字符串，精度表示输出的最大长度。
	"{0:.2f}".format(12345.67890)
		Out[29]: '12345.68'
	"{0:H^20.3f}".format(12345.67890)
		Out[30]: 'HHHHH12345.679HHHHHH'
	"{0:.4}".format("PYTHON")
		Out[31]: 'PYTH'
 <类型>
	表示输出整数和浮点数类型的格式规则。对于整数类型，输出格式包括6 种：
	b: 输出整数的二进制方式；
	c: 输出整数对应的 Unicode 字符；
	d: 输出整数的十进制方式；
	o: 输出整数的八进制方式；
	x: 输出整数的小写十六进制方式；
	X: 输出整数的大写十六进制方式；
		"{0:b},{0:c},{0:d},{0:o},{0:x},{0:X}".format(425)
			Out[32]: '110101001,Ʃ,425,651,1a9,1A9'
	对于浮点数类型，输出格式包括4 种：
	e: 输出浮点数对应的小写字母 e 的指数形式；
	E: 输出浮点数对应的大写字母 E 的指数形式；
	f: 输出浮点数的标准浮点形式；
	%: 输出浮点数的百分形式。
	     浮点数输出时尽量使用<.精度>表示小数部分的宽度，有助于更好控制输出格式。
		"{0:e},{0:E},{0:f},{0:%}".format(3.14)
			Out[33]: '3.140000e+00,3.140000E+00,3.140000,314.000000%'
		"{0:.2e},{0:.2E},{0:.2f},{0:.2%}".format(3.14)
			Out[34]: '3.14e+00,3.14E+00,3.14,314.00%'	

三、字符串前面添加u,r,b的含义
u/U:表示unicode字符串 
不是仅仅是针对中文, 可以针对任何的字符串，代表是对字符串进行unicode编码。 
一般英文字符在使用各种编码下, 基本都可以正常解析, 所以一般不带u；但是中文, 必须表明所需编码, 否则一旦编码转换就会出现乱码。 
建议所有编码方式采用utf8

r/R:非转义的原始字符串 
与普通字符相比，其他相对特殊的字符，其中可能包含转义字符，即那些，反斜杠加上对应字母，表示对应的特殊含义的，比如最常见的”\n”表示换行，”\t”表示Tab等。
而如果是以r开头，那么说明后面的字符，都是普通的字符了，即如果是“\n”那么表示一个反斜杠字符，一个字母n，而不是表示换行了。 
以r开头的字符，常用于正则表达式，对应着re模块。

b:bytes 
python3.x里默认的str是(py2.x里的)unicode, bytes是(py2.x)的str, b”“前缀代表的就是bytes 
python2.x里, b前缀没什么具体意义， 只是为了兼容python3.x的这种写法

四、深拷贝
a=np.array([1,2,3])
b=a
b[2]=1
out: b = [1,2,1]
	 a = [1,2,1]
a=np.array([1,2,3])
b=a.copy()
b[2]=1
out: b = [1,2,1]
	 a = [1,2,3]

五、list和tuple的一些点
a=[1,2,3]
b=[4,5]
a+b
out: [1,2,3,4,5]
a.append(b)
out: [1,2,3,[4,5]]
a=(1,2,3)
b=(4,5)
a+b
out: (1,2,3,4,5)










